from rbsp import RBSPBits

COEFF_TOKEN_MAP = [
 [0 ,0  ,'1'                ,'11'               ,'1111'         ,'000011'   ,'01'       ,'1']
,[0 ,1  ,'000101'           ,'001011'           ,'001111'       ,'000000'   ,'000111'   ,'0001111']
,[1 ,1  ,'01'               ,'10'               ,'1110'         ,'000001'   ,'1'        ,'01']
,[0 ,2  ,'00000111'         ,'000111'           ,'001011'       ,'000100'   ,'000100'   ,'0001110']
,[1 ,2  ,'000100'           ,'00111'            ,'01111'        ,'000101'   ,'000110'   ,'0001101']
,[2 ,2  ,'001'              ,'011'              ,'1101'         ,'000110'   ,'001'      ,'001']
,[0 ,3  ,'000000111'        ,'0000111'          ,'001000'       ,'001000'   ,'000011'   ,'000000111']
,[1 ,3  ,'00000110'         ,'001010'           ,'01100'        ,'001001'   ,'0000011'  ,'0001100']
,[2 ,3  ,'0000101'          ,'001001'           ,'01110'        ,'001010'   ,'0000010'  ,'0001011']
,[3 ,3  ,'00011'            ,'0101'             ,'1100'         ,'001011'   ,'000101'   ,'00001']
,[0 ,4  ,'0000000111'       ,'00000111'         ,'0001111'      ,'001100'   ,'000010'   ,'000000110']
,[1 ,4  ,'000000110'        ,'000110'           ,'01010'        ,'001101'   ,'00000011' ,'000000101']
,[2 ,4  ,'00000101'         ,'000101'           ,'01011'        ,'001110'   ,'00000010' ,'0001010']
,[3 ,4  ,'000011'           ,'0100'             ,'1011'         ,'001111'   ,'0000000'  ,'000001']
,[0 ,5  ,'00000000111'      ,'00000100'         ,'0001011'      ,'010000'   ,'-'        ,'0000000111']
,[1 ,5  ,'0000000110'       ,'0000110'          ,'01000'        ,'010001'   ,'-'        ,'0000000110']
,[2 ,5  ,'000000101'        ,'0000101'          ,'01001'        ,'010010'   ,'-'        ,'000000100']
,[3 ,5  ,'0000100'          ,'00110'            ,'1010'         ,'010011'   ,'-'        ,'0001001']
,[0 ,6  ,'0000000001111'    ,'000000111'        ,'0001001'      ,'010100'   ,'-'        ,'00000000111']
,[1 ,6  ,'00000000110'      ,'00000110'         ,'001110'       ,'010101'   ,'-'        ,'00000000110']
,[2 ,6  ,'0000000101'       ,'00000101'         ,'001101'       ,'010110'   ,'-'        ,'0000000101']
,[3 ,6  ,'00000100'         ,'001000'           ,'1001'         ,'010111'   ,'-'        ,'0001000']
,[0 ,7  ,'0000000001011'    ,'00000001111'      ,'0001000'      ,'011000'   ,'-'        ,'000000000111']
,[1 ,7  ,'0000000001110'    ,'000000110'        ,'001010'       ,'011001'   ,'-'        ,'000000000110']
,[2 ,7  ,'00000000101'      ,'000000101'        ,'001001'       ,'011010'   ,'-'        ,'00000000101']
,[3 ,7  ,'000000100'        ,'000100'           ,'1000'         ,'011011'   ,'-'        ,'0000000100']
,[0 ,8  ,'0000000001000'    ,'00000001011'      ,'00001111'     ,'011100'   ,'-'        ,'0000000000111']
,[1 ,8  ,'0000000001010'    ,'00000001110'      ,'0001110'      ,'011101'   ,'-'        ,'000000000101']
,[2 ,8  ,'0000000001101'    ,'00000001101'      ,'0001101'      ,'011110'   ,'-'        ,'000000000100']
,[3 ,8  ,'0000000100'       ,'0000100'          ,'01101'        ,'011111'   ,'-'        ,'00000000100']
,[0 ,9  ,'00000000001111'   ,'000000001111'     ,'00001011'     ,'100000'   ,'-'        ,'-']
,[1 ,9  ,'00000000001110'   ,'00000001010'      ,'00001110'     ,'100001'   ,'-'        ,'-']
,[2 ,9  ,'0000000001001'    ,'00000001001'      ,'0001010'      ,'100010'   ,'-'        ,'-']
,[3 ,9  ,'00000000100'      ,'000000100'        ,'001100'       ,'100011'   ,'-'        ,'-']
,[0 ,10 ,'00000000001011'   ,'000000001011'     ,'000001111'    ,'100100'   ,'-'        ,'-']
,[1 ,10 ,'00000000001010'   ,'000000001110'     ,'00001010'     ,'100101'   ,'-'        ,'-']
,[2 ,10 ,'00000000001101'   ,'000000001101'     ,'00001101'     ,'100110'   ,'-'        ,'-']
,[3 ,10 ,'0000000001100'    ,'00000001100'      ,'0001100'      ,'100111'   ,'-'        ,'-']
,[0 ,11 ,'000000000001111'  ,'000000001000'     ,'000001011'    ,'101000'   ,'-'        ,'-']
,[1 ,11 ,'000000000001110'  ,'000000001010'     ,'000001110'    ,'101001'   ,'-'        ,'-']
,[2 ,11 ,'00000000001001'   ,'000000001001'     ,'00001001'     ,'101010'   ,'-'        ,'-']
,[3 ,11 ,'00000000001100'   ,'00000001000'      ,'00001100'     ,'101011'   ,'-'        ,'-']
,[0 ,12 ,'000000000001011'  ,'0000000001111'    ,'000001000'    ,'101100'   ,'-'        ,'-']
,[1 ,12 ,'000000000001010'  ,'0000000001110'    ,'000001010'    ,'101101'   ,'-'        ,'-']
,[2 ,12 ,'000000000001101'  ,'0000000001101'    ,'000001101'    ,'101110'   ,'-'        ,'-']
,[3 ,12 ,'00000000001000'   ,'000000001100'     ,'00001000'     ,'101111'   ,'-'        ,'-']
,[0 ,13 ,'0000000000001111' ,'0000000001011'    ,'0000001101'   ,'110000'   ,'-'        ,'-']
,[1 ,13 ,'000000000000001'  ,'0000000001010'    ,'000000111'    ,'110001'   ,'-'        ,'-']
,[2 ,13 ,'000000000001001'  ,'0000000001001'    ,'000001001'    ,'110010'   ,'-'        ,'-']
,[3 ,13 ,'000000000001100'  ,'0000000001100'    ,'000001100'    ,'110011'   ,'-'        ,'-']
,[0 ,14 ,'0000000000001011' ,'0000000000111'    ,'0000001001'   ,'110100'   ,'-'        ,'-']
,[1 ,14 ,'0000000000001110' ,'00000000001011'   ,'0000001100'   ,'110101'   ,'-'        ,'-']
,[2 ,14 ,'0000000000001101' ,'0000000000110'    ,'0000001011'   ,'110110'   ,'-'        ,'-']
,[3 ,14 ,'000000000001000'  ,'0000000001000'    ,'0000001010'   ,'110111'   ,'-'        ,'-']
,[0 ,15 ,'0000000000000111' ,'00000000001001'   ,'0000000101'   ,'111000'   ,'-'        ,'-']
,[1 ,15 ,'0000000000001010' ,'00000000001000'   ,'0000001000'   ,'111001'   ,'-'        ,'-']
,[2 ,15 ,'0000000000001001' ,'00000000001010'   ,'0000000111'   ,'111010'   ,'-'        ,'-']
,[3 ,15 ,'0000000000001100' ,'0000000000001'    ,'0000000110'   ,'111011'   ,'-'        ,'-']
,[0 ,16 ,'0000000000000100' ,'00000000000111'   ,'0000000001'   ,'111100'   ,'-'        ,'-']
,[1 ,16 ,'0000000000000110' ,'00000000000110'   ,'0000000100'   ,'111101'   ,'-'        ,'-']
,[2 ,16 ,'0000000000000101' ,'00000000000101'   ,'0000000011'   ,'111110'   ,'-'        ,'-']
,[3 ,16 ,'0000000000001000' ,'00000000000100'   ,'0000000010'   ,'111111'   ,'-'        ,'-']
]


TOTAL_ZEROS_0_7_MAP = [
[0   ,'1'          ,'111'       ,'0101'     ,'00011'    ,'0101'     ,'000001'     ,'000001'    0000 01     0000 01     0000 1  0000    0000    000     00  0
[1   ,'011'        ,'110'       ,'111'      ,'111'      ,'0100'     ,'00001'      ,'00001'     0001        0000 00     0000 0  0001    0001    001     01  1
[2   ,'010'        ,'101'       ,'110'      ,'0101'     ,'0011'     ,'111'        ,'101'        0000 1      0001        001     001     01      1       1   -
[3   ,'0011'       ,'100'       ,'101'      ,'0100'     ,'111'      ,'110'        ,'100'        011         11          11      010     1       01      -   -
[4   ,'0010'       ,'011'       ,'0100'     ,'110'      ,'110'      ,'101'        ,'011'        11          10          10      1       001     -       -   -
[5   ,'00011'      ,'0101'      ,'0011'     ,'101'      ,'101'      ,'100'        ,'11          10          001         01      011     -       -       -   -
[6   ,'00010'      ,'0100'      ,'100'      ,'100'      ,'100'      ,'011'        ,'010         010         01          0001    -       -       -       -   -
[7   ,'000011'     ,'0011'      ,'011'      ,'0011'     ,'011'      ,'010'        ,'0001        001         0000 1      -       -       -       -       -   -
[8   ,'000010'     ,'0010'      ,'0010'     ,'011'      ,'0010'     ,'0001'       ,'001         0000 00     -           -       -       -       -       -   -
[9   ,'0000011'    ,'00011'     ,'00011'    ,'0010'     ,'00001'    ,'001'        ,'0000 00     -           -           -       -       -       -       -   -
[10  ,'0000010'    ,'00010'     ,'00010'    ,'00010'    ,'0001'     ,'000000'     ,'-           -           -           -       -       -       -       -   -
[11  ,'00000011'   ,'000011'    ,'000001'   ,'00001'    ,'00000'    ,'-'          ,'-           -           -           -       -       -       -       -   -
[12  ,'00000010'   ,'000010'    ,'00001'    ,'00000'    ,'-'        ,'-'          ,'-           -           -           -       -       -       -       -   -
[13  ,'000000011'  ,'000001'    ,'000000'   ,'-'        ,'-'        ,'-'          ,'-           -           -           -       -       -       -       -   -
[14  ,'000000010'  ,'000000'    ,'-'        ,'-'        ,'-'        ,'-'          ,'-           -           -           -       -       -       -       -   -
[15  ,'000000001'  ,'-'         ,'-'        ,'-'        ,'-'        ,'-'          ,'-           -           -           -       -       -       -       -   -
]

TOTAL_ZEROS_8_15_MAP = [
[0, "000001", "000001", "000001", "0000", "0000", "0", "0"],
[1, "0001", "000000", "0001", "0001", "00001", "01", "1"],
[2, "00001", "0001", "001", "001", "1", "1", "1"],
[3, "011", "11", "11", "010", "01", "01", "-"],
[4, "11", "10", "1", "001", "-", "-", "-"],
[5, "10", "01", "01", "-", "-", "-", "-"],
[6, "010", "01", "0001", "-", "-", "-", "-"],
[7, "001", "00001", "-", "-", "-", "-", "-"],
[8, "000000", "-", "-", "-", "-", "-", "-"]
]

class H264CAVLCDec:
    def __init__(self, rbsp:RBSPBits):
        self.rbsp = rbsp
        self.map_0_2 = {}
        self.map_2_4 = {}
        self.map_4_8 = {}
        self.map_8_inf = {}
        self.map_neg_1 = {}
        self.map_neg_2 = {}
        self.init_map()
        self.total_zeros_map = {}
        pass

    def init_map(self):
        for row in COEFF_TOKEN_MAP:
            val = (row[0], row[1])
            self.map_0_2[row[2]] = val
            self.map_2_4[row[3]] = val
            self.map_4_8[row[4]] = val
            self.map_4_8[row[5]] = val
            self.map_4_8[row[6]] = val
            self.map_4_8[row[7]] = val
        
        print("OK CAVLC INIT")
    
    def ce_coeff_token(self, nC):
        select_map = self.map_0_2
        if nC >= 0 and nC < 2:
            select_map = self.map_0_2
        elif nC >= 2 and nC < 4:
            select_map = self.map_2_4
        elif nC >= 4 and nC < 8:
            select_map = self.map_4_8
        elif nC >= 8:
            select_map = self.map_8_inf
        elif nC == -1:
            select_map = self.map_neg_1
        elif nC == -2:
            select_map = self.map_neg_2

        key = ""
        while True:
            one = self.rbsp.f(1)
            if one == 0:
                key += '0'
            else:
                key += '1'
            if key in select_map:
                return (key, select_map[key]) 

    def  ce_level_prefix(self):
        level_prefix = 0
        while True:
            bit = self.rbsp.f(1)
            if bit == 1:
                return level_prefix
            else:
                level_prefix += 1